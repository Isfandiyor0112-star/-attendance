const translations = {
  ru: {
    admin_panel_title: "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —à–∫–æ–ª—ã ‚Ññ22",
    choose_date: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
    total_absent: "–í—Å–µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö",
    reason_stats: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—á–∏–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è",
    clear_history: "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
    absent_list: "–°–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö"
  },
  uz: {
    admin_panel_title: "22-maktab admin paneli",
    choose_date: "Sana tanlang:",
    total_absent: "Yo‚Äòqlarning jami",
    reason_stats: "Yo‚Äòqlik sabablari statistikasi",
    clear_history: "Tarixni tozalash",
    absent_list: "Yo‚Äòqliklar ro‚Äòyxati"
  }
};

function setLang(lang) {
  document.querySelectorAll('[data-i18n]').forEach(el => {
    const key = el.getAttribute('data-i18n');
    if (translations[lang][key]) el.textContent = translations[lang][key];
  });
  localStorage.setItem('lang', lang);
}

document.getElementById('lang-ru').onclick = () => setLang('ru');
document.getElementById('lang-uz').onclick = () => setLang('uz');
setLang(localStorage.getItem('lang') || 'ru');

let absents = [];

async function loadAbsents() {
  const res = await fetch('https://attendancesrv.onrender.com/api/absents');
  absents = await res.json();
  renderByDate();
  fillDateFilter();
}

function fillDateFilter() {
  const dateFilter = document.getElementById('dateFilter');
  dateFilter.innerHTML = '';
  const dates = [...new Set(absents.map(a => a.date))];
  dates.forEach(date => {
    const option = document.createElement('option');
    option.value = date;
    option.textContent = date;
    dateFilter.appendChild(option);
  });
  dateFilter.onchange = () => renderByDate();
}

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
const reasonColors = [
  '#09ff00ff', // –ó–µ–ª—ë–Ω—ã–π
  '#ff0000ff', // –ö—Ä–∞—Å–Ω—ã–µ        
 ];

// --- –û–±—â–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∏ –ª–µ–≥–µ–Ω–¥–∞ ---
function renderReasonPieChart(data) {  
  const stats = {};
  data.forEach(item => {
    stats[item.reason] = (stats[item.reason] || 0) + 1;
  });
  const labels = Object.keys(stats);
  const values = Object.values(stats);

  if (window.reasonChart && typeof window.reasonChart.destroy === 'function') {
    window.reasonChart.destroy();
  }

  const ctx = document.getElementById('reasonChart').getContext('2d');
  window.reasonChart = new Chart(ctx, {
    type: 'pie',
    data: {
      labels: labels,
      datasets: [{
        data: values,
        backgroundColor: labels.map((_, i) => reasonColors[i % reasonColors.length])
      }]
    },
    options: {
      responsive: false,
      plugins: {
        legend: { display: false }
      }
    }
  });

  // –õ–µ–≥–µ–Ω–¥–∞ –¥–ª—è –æ–±—â–µ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
  const legend = labels.map((label, i) =>
    `<div style="display:flex;align-items:center;margin-bottom:4px;">
      <span style="display:inline-block;width:16px;height:16px;background:${reasonColors[i % reasonColors.length]};margin-right:8px;border-radius:3px;"></span>
      <span>${label}</span>
    </div>`
  ).join('');
  document.getElementById('reasonLegend').innerHTML = legend;
}

// --- –î–∏–∞–≥—Ä–∞–º–º—ã –ø–æ –∫–ª–∞—Å—Å–∞–º ---
function renderClassPieCharts(data) {
  const container = document.getElementById('classChartsContainer');
  container.innerHTML = '';

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º
  const classMap = {};
  data.forEach(item => {
    if (!classMap[item.className]) classMap[item.className] = [];
    classMap[item.className].push(item);
  });

  Object.keys(classMap).sort().forEach((className, idx) => {
    const classData = classMap[className];

    // --- –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º ---
    const stats = {};
    classData.forEach(item => {
      stats[item.reason] = (stats[item.reason] || 0) + 1;
    });
    const labels = Object.keys(stats);
    const values = Object.values(stats);
    // ----------------------------------------------

    // –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞
    const col = document.createElement('div');
    col.className = 'col-lg-4 col-md-6 col-sm-12 mb-1 d-flex';

    const card = document.createElement('div');
    card.className = 'card flex-fill';
    card.style.maxWidth = '320px';
    card.style.minWidth = '220px';

    const cardBody = document.createElement('div');
    cardBody.className = 'card-body p-2 d-flex flex-column align-items-center';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const title = document.createElement('h6');
    title.textContent = `–ö–ª–∞—Å—Å ${className}`;
    title.className = 'mb-2 w-100 text-center';
    cardBody.appendChild(title);

    // –î–∏–∞–≥—Ä–∞–º–º–∞ –∏ –ª–µ–≥–µ–Ω–¥–∞ –≤ —Å—Ç—Ä–æ–∫—É
    const chartRow = document.createElement('div');
    chartRow.className = 'd-flex w-100 justify-content-center align-items-center mb-1';

    // –î–∏–∞–≥—Ä–∞–º–º–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º
    const chartDiv = document.createElement('div');
    chartDiv.style.marginLeft = '10px';
    chartDiv.style.marginRight = '10px';
    chartDiv.style.display = 'flex';
    chartDiv.style.alignItems = 'center';
    const canvas = document.createElement('canvas');
    canvas.id = `classChart${idx}`;
    canvas.width = 100;
    canvas.height = 100;
    chartDiv.appendChild(canvas);

    // –õ–µ–≥–µ–Ω–¥–∞ —Å–ø—Ä–∞–≤–∞
    const legendDiv = document.createElement('div');
    legendDiv.className = 'ms-2';
    legendDiv.style.fontSize = '0.9em';
    legendDiv.innerHTML = labels.map((label, i) =>
      `<div style="display:flex;align-items:center;margin-bottom:2px;">
        <span style="display:inline-block;width:12px;height:12px;background:${reasonColors[i % reasonColors.length]};margin-right:6px;border-radius:2px;"></span>
        <span>${label}</span>
      </div>`
    ).join('');

    chartRow.appendChild(chartDiv);
    chartRow.appendChild(legendDiv);
    cardBody.appendChild(chartRow);

    // –°–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–∞–∫—Ç–Ω–æ —Å –ø–æ–ª–æ—Å–∫–∞–º–∏
    const list = document.createElement('div');
    list.className = 'mt-1 w-100 text-center';
    list.style.fontSize = '0.92em';
    classData.forEach((item, i) => {
      const p = document.createElement('div');
      const total = item.allstudents ? `–∏–∑ ${item.allstudents}` : '';
      p.textContent = `${item.date} | ${item.className} | ${item.studentName} ‚Äî (${item.reason}) ${total}`;
      list.appendChild(p);
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ—Å–∫—É, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      if (i < classData.length - 1) {
        const hr = document.createElement('hr');
        hr.className = 'my-1';
        list.appendChild(hr);
      }
    });
    cardBody.appendChild(list);

    card.appendChild(cardBody);
    col.appendChild(card);
    container.appendChild(col);

    // --- —Ä–∏—Å—É–µ–º pie chart ---
    new Chart(canvas.getContext('2d'), {
      type: 'pie',
      data: {
        labels: labels,
        datasets: [{
          data: values,
          backgroundColor: labels.map((_, i) => reasonColors[i % reasonColors.length])
        }]
      },
      options: {
        responsive: false,
        plugins: {
          legend: { display: false }
        }
      }
    });
  });
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é renderByDate
function renderByDate() {
  const date = document.getElementById('dateFilter').value;
  const filtered = date ? absents.filter(a => a.date === date) : absents;
  document.getElementById('totalAbsent').textContent = filtered.length;
  renderReasonPieChart(filtered); // –û–±—â–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤ –ø–µ—Ä–≤–æ–º –±–ª–æ–∫–µ
  renderClassPieCharts(filtered); // –î–∏–∞–≥—Ä–∞–º–º—ã –ø–æ –∫–ª–∞—Å—Å–∞–º –≤–Ω–∏–∑—É
}

function renderAbsentList(data) {
  const list = document.getElementById('adminAbsentList');
  list.innerHTML = '';
  data.forEach(item => {
    const li = document.createElement('li');
    li.className = "list-group-item";
    li.textContent = `${item.date} | ${item.className} | ${item.studentName} ‚Äî (${item.reason})`;
    list.appendChild(li);
  });
}

// –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏ renderAbsentList
document.getElementById('clearHistory').onclick = async function() {
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö?')) {
    await fetch('https://attendancesrv.onrender.com/api/absents', { method: 'DELETE' });
    location.reload();
  }
};

document.addEventListener('DOMContentLoaded', () => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —É—á–∏—Ç–µ–ª—è
  if (!localStorage.getItem('teacher')) {
    window.location.href = 'index.html';
  } else {
    const teacher = JSON.parse(localStorage.getItem('teacher'));
   const allowedAdmins = ["admin", "shaxnoza", "furkat", "matlyuba"];
if (!teacher || !allowedAdmins.includes(teacher.login)) {

      window.location.href = 'index.html';
    }
  }

  loadAbsents();
});

document.getElementById('exportExcel').addEventListener('click', async () => {
  try {
    const selectedDate = document.getElementById('dateFilter').value;
    if (!selectedDate) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º.");
      return;
    }

    const res = await fetch('https://attendancesrv.onrender.com/api/absents');
    const data = await res.json();
    const filtered = data.filter(a => a.date === selectedDate);

    // üìÅ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º
    const classMap = {};
    filtered.forEach(item => {
      const total = parseFloat(item.allstudents);
      const sick = parseFloat(item.count);
      const present = total - sick;
      const percent = (total && sick) ? `${((present / total) * 100).toFixed(1)}%` : '';

      if (!classMap[item.className]) classMap[item.className] = [];
      classMap[item.className].push({
        –î–∞—Ç–∞: item.date,
        –£—á–∏—Ç–µ–ª—å: item.teacher,
        –£—á–µ–Ω–∏–∫: item.studentName,
        –ü—Ä–∏—á–∏–Ω–∞: item.reason,
        –í—Å–µ–≥–æ: total || '',
        –ë–æ–ª–µ—é—Ç: sick || '',
        –ü—Ä–∏—à–ª–∏: present || '',
        –ü—Ä–æ—Ü–µ–Ω—Ç: percent
      });
    });

    // üìä –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    function shortenName(fullName) {
      const parts = fullName.trim().split(/\s+/);
      if (parts.length < 2) return fullName;
      const surname = parts[0];
      const initials = parts.slice(1).map(p => p[0].toUpperCase()).join('.');
      return `${surname}.${initials}.`;
    }

    function normalize(name) {
      return name.toLowerCase().replace(/\s+/g, '').replace(/\./g, '');
    }

    // üìä –°–æ–±–∏—Ä–∞–µ–º summaryRows
    const summaryRows = [];
    Object.keys(classMap).forEach(className => {
      const rows = classMap[className];
      if (rows.length === 0) return;

      const total = parseFloat(rows[0].–í—Å–µ–≥–æ);
      const sick = rows.length;
      const percent = total ? ((total - sick) / total * 100).toFixed(1) : '0';

      summaryRows.push({
        –¥–∞—Ç–∞: rows[0].–î–∞—Ç–∞,
        —É—á–∏—Ç–µ–ª—å: shortenName(rows[0].–£—á–∏—Ç–µ–ª—å),
        —É—á–∏—Ç–µ–ª—å_–æ—Ä–∏–≥–∏–Ω–∞–ª: rows[0].–£—á–∏—Ç–µ–ª—å,
        –∫–ª–∞—Å—Å: className,
        –ø—Ä–æ—Ü–µ–Ω—Ç: `${percent}%`
      });
    });

    // üì• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∏—Ç–µ–ª–µ–π
    const allTeachers = [
      "Dadabayeva Iroda Dilmurodovna",
      "Cherimitsina Anjilika Kazakovna",
      "Ermakova Dilfuza Yuldashevna",
      "Nurmatova Nurjaxon Raimovna",
      "Musamatova Gulnara Maxmudovna",
      "Toshmatova Yulduz Zokirjon qizi",
      "Movlonova Umida Usmankulovna",
      "Ubaydullayeva Matluba Misratilla qizi",
      "Ismoilova Nasiba Eshko‚Äôziyevna",
      "Izalxan Lyubov Ilzatovna",
      "Matkarimova Nargiza Batirovna",
      "Qarshibayeva Nilufar Abdinamatovna",
      "Djamalova Fotima Abdulqosim qizi",
      "Kambarova Kimmat Maxmudovana",
      "Polyakova Vera Aleksandrovna",
      "Normuratova Dilfuza Xidirovna",
      "Madaminova SevaraYusubayevna",
      "Sheranova Dilafruz Toliboyevna",
      "Zokirxonova Gulnara Bilyalovna",
      "Abdumavlonova Xilola Mirzakulovna",
      "Ermatova Xilola Abdulamitovna",
      "Mamatqulova Orzigul Saxobidinovna",
      "Raximov Rustam Rasuljanovich",
      "Ismoilov Avazjon Kuldashovich",
      "Yettiyeva Dilafruz Muxitdinovna",
      "Malikova Barno Amanjanovna",
      "Normatova Gozal Davlataliyevna",
      "Nefyodova Natasha Aleksandrovna",
      "Xakimova Dilfuza Abdumo‚Äôminovna",
      "Fozilov Inomjon Obidovich",
      "Buligina Viktoriya Yuryevna",
      "Yardamova Matluba Muxtarovna",
      "Mandiyev Orif Alimjonovich",
      "Pardayeva Nigora Mirzadjonova",
      "Aripov Alisher Isakovich",
      "Mamajanova Muslima Alixanovna",
      "Xodjahanov Asom Osimovich",
      "Ismoilova Mehriniso Abduraximovna",
      "Xasanova Olesya Gennadevna",
      "Satimova Dilafruz Fayzullayevna",
      "Ruzmatova Shahodat Mavlyanovna",
      "Baltabayeva Marguba Tulqinbayevna",
      "Ryabinina Svetlana Yuryevna",
      "Abdullayeva Maftuna Rahmonberdiyevna",
      "Aliyeva Nilufar Marufjanovna"
    ];

    const submitted = new Set(summaryRows.map(r => normalize(r.—É—á–∏—Ç–µ–ª—å_–æ—Ä–∏–≥–∏–Ω–∞–ª || r.—É—á–∏—Ç–µ–ª—å)));
    const missing = allTeachers.filter(t => !submitted.has(normalize(t)));

    missing.forEach(teacher => {
      summaryRows.push({
        –¥–∞—Ç–∞: selectedDate,
        —É—á–∏—Ç–µ–ª—å: shortenName(teacher),
        —É—á–∏—Ç–µ–ª—å_–æ—Ä–∏–≥–∏–Ω–∞–ª: teacher,
        –∫–ª–∞—Å—Å: '-',
        –ø—Ä–æ—Ü–µ–Ω—Ç: '0%'
      });
    });

    // üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    summaryRows.sort((a, b) => parseFloat(b.–ø—Ä–æ—Ü–µ–Ω—Ç) - parseFloat(a.–ø—Ä–æ—Ü–µ–Ω—Ç));

    // üìÅ –°–æ–∑–¥–∞—ë–º Excel-–∫–Ω–∏–≥—É
    const workbook = XLSX.utils.book_new();

    // üìÑ –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç umumiy –ø–µ—Ä–≤—ã–º
    const umumiySheet = XLSX.utils.json_to_sheet(
      summaryRows.map(({ –¥–∞—Ç–∞, —É—á–∏—Ç–µ–ª—å, –∫–ª–∞—Å—Å, –ø—Ä–æ—Ü–µ–Ω—Ç }) => ({ –¥–∞—Ç–∞, —É—á–∏—Ç–µ–ª—å, –∫–ª–∞—Å—Å, –ø—Ä–æ—Ü–µ–Ω—Ç }))
    );
    umumiySheet['!cols'] = [
      { wch: 12 }, { wch: 40 }, { wch: 10 }, { wch: 10 }
    ];
    XLSX.utils.book_append_sheet(workbook, umumiySheet, 'umumiy');

    // üìÑ –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
    Object.keys(classMap).sort().forEach(className => {
      const sheet = XLSX.utils.json_to_sheet(classMap[className]);
      sheet['!cols'] = [
        { wch: 12 }, { wch: 20 }, { wch: 20 }, { wch: 18 },
        { wch: 10 }, { wch: 10 }, { wch: 10 }, { wch: 10 }
      ];
      XLSX.utils.book_append_sheet(workbook, sheet, `–ö–ª–∞—Å—Å ${className}`);
    });

    // üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    XLSX.writeFile(workbook, `DAVOMAT_${selectedDate}.xlsx`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:", error);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});









